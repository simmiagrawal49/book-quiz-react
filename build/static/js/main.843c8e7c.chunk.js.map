{"version":3,"sources":["components/GameOver.js","components/Quiz.js","App.js","index.js"],"names":["Title","styled","h1","Points","p","RetryButton","button","GameOver","pts","onClick","window","location","reload","QuizWindow","div","Options","Option","Question","Quiz","useState","quiz","setQuiz","number","setNumber","setPts","isPressed","setIsPressed","pickAnswer","e","userAnswer","target","outerText","answer","alert","useEffect","axios","get","then","res","data","results","map","item","question","options","arr","incorrect_answers","correct_answer","sort","Math","random","catch","err","console","error","style","fontWeight","dangerouslySetInnerHTML","__html","index","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAEMA,EAAQC,IAAOC,GAAV,wEAKLC,EAASF,IAAOG,EAAV,2EAINC,EAAcJ,IAAOK,OAAV,uWA6BFC,EAbE,SAAC,GAAW,IAAVC,EAAS,EAATA,IAIf,OACI,gCACI,cAACR,EAAD,wBACA,eAACG,EAAD,sBAAiBK,EAAjB,iBACA,cAACH,EAAD,CAAaI,QAND,kBAAMC,OAAOC,SAASC,UAMlC,uBC7BNC,G,MAAaZ,IAAOa,IAAV,uHAMVC,EAAUd,IAAOa,IAAV,8LAUPE,EAASf,IAAOK,OAAV,mfAuBNW,EAAWhB,IAAOa,IAAV,kEAIRd,EAAQC,IAAOa,IAAV,6FAiFII,EAnEF,WAET,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOX,EAAP,KAAYgB,EAAZ,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAIMC,EAAa,SAACC,GAEhB,IAAIC,EAAaD,EAAEE,OAAOC,UAEtBX,EAAKE,GAAQU,SAAWH,GACxBL,EAAOhB,EAAM,GACZkB,GAAcD,GACdQ,MAAM,YAENA,MAAM,aAEXV,EAAUD,EAAS,IAqBvB,OAlBAY,qBAAU,WAENC,IAAMC,IAAI,cACLC,MAAK,SAAAC,GACFjB,EAAQiB,EAAIC,KAAKC,QAAQC,KAAI,SAAAC,GAAI,MAE7B,CACIC,SAAUD,EAAKC,SACfC,SAxBHC,EAwBoB,GAAD,mBAAKH,EAAKI,mBAAV,CAA6BJ,EAAKK,iBAxB7CF,EAAIG,MAAK,kBAAMC,KAAKC,SAAW,OAyBpClB,OAAQU,EAAKK,gBAzBjB,IAACF,SA8BRM,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAEjC,IAKC,eAACvC,EAAD,WAEMO,EAAKE,IACD,gCACF,cAAC,EAAD,CAAOiC,MAAO,CAACC,WAAY,QAA3B,uBACA,uBACI,cAACvC,EAAD,CAAUwC,wBAAyB,CAAEC,OAAQtC,EAAKE,GAAQqB,YAE1D,cAAC5B,EAAD,UACKK,EAAKE,GAAQsB,QAAQH,KAAI,SAACC,EAAMiB,GAAP,OAC1B,cAAC3C,EAAD,CAAqByC,wBAAyB,CAAEC,OAAQhB,GAAQjC,QAASkB,GAA5DgC,WAMV,KAAXrC,GAAiB,cAAC,EAAD,CAAUd,IAAKA,QC7GjCoD,MAVf,WAGE,OACE,qBAAKC,UAAU,OAAf,SACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.843c8e7c.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst Title = styled.h1`\r\n    margin-top: 4em;\r\n    font-size: 48px;\r\n`;\r\n\r\nconst Points = styled.p`\r\n    font-size: 24px;\r\n    margin-bottom: 3em;\r\n`;\r\nconst RetryButton = styled.button`\r\n    border: 1px solid #616A94;\r\n    border-radius: 50px;\r\n    padding: 15px 30px;\r\n    text-decoration: none;\r\n    color: #616A94;\r\n    background-color: #161A31;\r\n    transition: 0.3s;\r\n    font-size: 1em;\r\n    cursor: pointer;\r\n    outline: none;\r\n    &:hover {\r\n        color: white;\r\n        background-color: #616A94;\r\n    }\r\n`;\r\nconst GameOver = ({pts}) => {\r\n\r\n    const refreshPage = () => window.location.reload();\r\n\r\n    return (\r\n        <div>\r\n            <Title>Game Over</Title>\r\n            <Points>You did {pts} out of 20!</Points>\r\n            <RetryButton onClick={refreshPage}>Retry</RetryButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameOver;","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\nimport GameOver from './GameOver';\r\n\r\nimport Popup from 'react-popup'\r\nconst QuizWindow = styled.div`\r\n    text-align: center;\r\n    font-size: clamp(20px, 2.5vw, 24px);\r\n    margin-top: 10vh;\r\n`;\r\n\r\nconst Options = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 70%;\r\n    margin: 2em auto;\r\n    @media screen and (min-width: 1180px) {\r\n        width: 50%;\r\n    }\r\n`;\r\n\r\nconst Option = styled.button`\r\n    display: block;\r\n    border: 1px solid #8e52a8;\r\n    border-radius: 15px;\r\n    padding: 15px 30px;\r\n    text-decoration: none;\r\n    color: #8e52a8;\r\n    background-color: #12011a;\r\n    transition: 0.3s;\r\n    font-size: 1em;\r\n    outline: none;\r\n    user-select: none;\r\n    margin-top: 1em;\r\n    cursor: pointer;\r\n    \r\n    @media screen and (min-width: 1180px) {\r\n        &:hover {\r\n            color: white;\r\n            background-color:#8e52a8;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Question = styled.div`\r\n    width: 70%;\r\n    margin: 0 auto;\r\n`;\r\nconst Title = styled.div`\r\n    width: 70%;\r\n    font-size:40px;\r\n    \r\n    margin: 0 auto;\r\n`;\r\n let pressedstyleincorrect= {\r\n    backgroundColor: '#161A31',\r\n  }\r\n  let pressedstylecorrect= {\r\n    backgroundColor: 'green',\r\n  }\r\n\r\n\r\nconst Quiz = () => {\r\n\r\n    const [quiz, setQuiz] = useState([]);\r\n    const [number, setNumber] = useState(0);\r\n    const [pts, setPts] = useState(0);\r\n    const [isPressed, setIsPressed] = useState(false);\r\n\r\n    const shuffle = (arr) => arr.sort(() => Math.random() - 0.5);\r\n\r\n    const pickAnswer = (e) => {\r\n\r\n        let userAnswer = e.target.outerText;\r\n\r\n        if (quiz[number].answer === userAnswer){ \r\n            setPts(pts + 1)\r\n             setIsPressed(!isPressed)\r\n             alert('Correct');\r\n        }\r\n        else{alert('InCorrect');}\r\n        ;\r\n        setNumber(number + 1);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('./pro.json')\r\n            .then(res => {\r\n                setQuiz(res.data.results.map(item => (\r\n\r\n                    {\r\n                        question: item.question,\r\n                        options: shuffle([...item.incorrect_answers, item.correct_answer]),\r\n                        answer: item.correct_answer\r\n                    }\r\n\r\n                )));\r\n            })\r\n            .catch(err => console.error(err))\r\n\r\n    }, []);\r\n\r\n    return (\r\n        \r\n        \r\n        <QuizWindow>\r\n            \r\n            { quiz[number] &&\r\n                  <div>\r\n                <Title style={{fontWeight: 'bold'}}>Book Quiz</Title>\r\n                <hr/>\r\n                    <Question dangerouslySetInnerHTML={{ __html: quiz[number].question }}></Question>\r\n\r\n                    <Options>\r\n                        {quiz[number].options.map((item, index) => (\r\n                        <Option key={index}  dangerouslySetInnerHTML={{ __html: item }} onClick={pickAnswer}></Option>\r\n                        ))}\r\n                    </Options>\r\n                </div>\r\n            }\r\n            {\r\n                number === 20 && <GameOver pts={pts} />\r\n            }\r\n        </QuizWindow>\r\n        \r\n    )\r\n}\r\n\r\nexport default Quiz","import React, { useState } from 'react'\nimport './App.css'\nimport Quiz from './components/Quiz'\n\nfunction App() {\n\n\n  return (\n    <div className=\"quiz\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}